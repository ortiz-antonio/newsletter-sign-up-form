<form class="subscribe flow" data-js="subscribe" action="/success/" method="get" novalidate>
  <div class="form-group">
    <label for="email" class="block font-bold">Email address</label>
    <input 
    type="email" 
    name="email" 
    data-js="email" 
    aria-describedby="email-error"
    aria-invalid="false"
    aria-required="true"
    required 
    autocomplete="email"
    placeholder="email@company.com" 
    class="[ field field-invalid ]"
    />
    <span data-layout="error-message" aria-live="polite" class="label-error" id="email-error">Valid email required</span>
  </div>
  <input
    type="submit"
    value="Subscribe to monthly newsletter"
    data-js="submit"
    class="[ button-primary ]"
    autocomplete="email"
  />
</form>

<style>
  .subscribe .form-group {
    position: relative;
  }

  span[data-layout='error-message'] {
    display: none;
  }

  .subscribe input[type='email']:user-invalid + span[data-layout='error-message'] {
    display: inline;
  }
</style>

<script webc:keep>
const form = document.querySelector('[data-js="subscribe"')
const inputEmail = document.querySelector('[data-js="email"]');
const submitBtn = document.querySelector('[data-js="submit"]');

inputEmail?.addEventListener("blur", (event) => {
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());
  if (validateEmail(data.email)) {
   setValid(inputEmail);
  } else {
    setInvalid(inputEmail);
  }
});

form?.addEventListener("submit", (event) => {
  event.preventDefault();
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());
  if (validateEmail(data.email)) {
   form.submit();
  } else {
    inputEmail.focus();
    form.reportValidity();
  }
});

function setInvalid(input){
  inputEmail.setAttribute("aria-invalid", "true");
}

function setValid(input){
  inputEmail.setAttribute("aria-invalid", "false");
}

function validateEmail(email) {
  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailPattern.test(email);
}

</script>